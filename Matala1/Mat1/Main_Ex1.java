package C_R;

/*
 * Decompiled with CFR 0_114.
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.Date;

public class Main_Ex1 {
    public static void main(String[] args) {
        try {
            Main_Ex1.main2();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main0(String[] args) {
        String f = "mediumEWD.txt";
        String test = "test3.txt";
        if (args != null && args.length > 2) {
            f = args[0];
            test = args[1];
        }
        String ans = String.valueOf(test) + "._ans.txt";
        In in = new In(f);
        Graph G = new Graph(in);
        int s = Integer.parseInt("1");
        DijkstraSP sp = new DijkstraSP(G, s);
        int t = 0;
        while (t < G.V()) {
            if (t % 100 == 0 && sp.hasPathTo(t)) {
                StdOut.printf("%d to %d (%.2f)  ", s, t, sp.distTo(t));
                for (DirectedEdge e : sp.pathTo(t)) {
                    StdOut.print(e + "   ");
                }
                StdOut.println();
            }
            ++t;
        }
        int[] invalid = new int[]{44, 14, 128};
        G.setValidateVertex(invalid, false);
        sp = new DijkstraSP(G, s);
        int t2 = 0;
        while (t2 < G.V()) {
            if (t2 % 100 == 0 && sp.hasPathTo(t2)) {
                StdOut.printf("%d to %d (%.2f)  ", s, t2, sp.distTo(t2));
                for (DirectedEdge e : sp.pathTo(t2)) {
                    StdOut.print(e + "   ");
                }
                StdOut.println();
            }
            ++t2;
        }
    }

    private static void main2() throws Exception {
        long start = new Date().getTime();
        String f = "mediumEWG.txt";
        String test = "test3.txt";
        System.out.println("SE1 Ex1: partual solution - for student testing");
        System.out.println("Loading graph file: " + f + " runing a test " + test);
        String ans = "Solution_" + test + "_" + f + "_" + start + "_.txt";
        FileWriter fw = new FileWriter(ans);
        PrintWriter os = new PrintWriter(fw);
        In in = new In(f);
        Graph G = new Graph(in);
        long s1 = new Date().getTime();
        System.out.println("Done loading Graph: " + f + "  in " + (s1 - start) + "  ms");
        
        FileReader fr = new FileReader(test);
        BufferedReader is = new BufferedReader(fr);
        String num_of_lines = is.readLine();
        String s = is.readLine();
        int ll = 0;
        os.println(String.valueOf(num_of_lines) + " regenerated by a simple SE1_EX1 solution");
        while (s != null && ll < 20) {
            String[] sa = s.split(" ");
            int source = Integer.parseInt(sa[0]);
            int target = Integer.parseInt(sa[1]);
            int size_of_BL = Integer.parseInt(sa[2]);// black list
            int[] BL = new int[size_of_BL];
            int i = 0;
            while (i < size_of_BL) {
                BL[i] = Integer.parseInt(sa[i + 3]);
                ++i;
            }
            double dist = Main_Ex1.sp(G, source, target, BL);
            os.println(String.valueOf(s) + " " + dist);
            ++ll;
            s = is.readLine();
        }
        long s2 = new Date().getTime();
        System.out.println("Done computing shortest paths on Graph: " + f + "  in " + (s2 - s1) + "  ms");
        System.out.println("Total time: " + (s2 - start) + "  ms");
        os.close();
    }

    public static double sp(Graph G, int source, int target, int[] BL) {
        double ans = -1.0;
        G.setValidateVertex(BL, false);
        DijkstraSP sp = new DijkstraSP(G, source);
        ans = sp.distTo(target);
        G.setValidateVertex(BL, true);
        return ans;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    private static void main1(String[] cmds) throws Exception {
        long start = new Date().getTime();
        String f = "mediumEWD.txt";
        String test = "test1.txt";
        System.out.println("SE1 Ex1: partual solution - for student testing");
        System.out.println("Loading graph file: " + cmds[0] + " runing a test " + cmds[1]);
        String ans = "Solution_" + cmds[1] + "_" + cmds[0] + "_" + start + "_.txt";
        FileWriter fw = new FileWriter(ans);
        PrintWriter os = new PrintWriter(fw);
        In in = new In(cmds[0]);
        Graph G = new Graph(in);
        long s1 = new Date().getTime();
        System.out.println("Done loading Graph: " + cmds[0] + "  in " + (s1 - start) + "  ms");
        FileReader fr = new FileReader(cmds[1]);
        BufferedReader is = new BufferedReader(fr);
        String num_of_lines = is.readLine();
        String s = is.readLine();
        int ll = 0;
        os.println(String.valueOf(num_of_lines) + " regenerated by a simple SE1_EX1 solution");
        while (s != null && ll < 20) {
            String[] sa = s.split(" ");
            int source = Integer.parseInt(sa[0]);
            int target = Integer.parseInt(sa[1]);
            int size_of_BL = Integer.parseInt(sa[2]);// black list
            int[] BL = new int[size_of_BL];
            int i = 0;
            while (i < size_of_BL) {
                BL[i] = Integer.parseInt(sa[i + 3]);
                ++i;
            }
            double dist = Main_Ex1.sp(G, source, target, BL);
            os.println(String.valueOf(s) + " " + dist);
            ++ll;
            s = is.readLine();
        }
        long s2 = new Date().getTime();
        System.out.println("Done computing shortest paths on Graph: " + cmds[0] + "  in " + (s2 - s1) + "  ms");
        System.out.println("Total time: " + (s2 - start) + "  ms");
        os.close();
    }

    
}

